Cloud-native Go
Build a continuously-updated app using managed platforms and services.
27 Aug 2018
Tags: cloud, azure, services

Josh Gavant
Program Manager, Microsoft
joshgav@microsoft.com
@joshugav

Martin Strobel
Software Engineer, Microsoft
marstr@microsoft.com
@mkstrobel

########################################

* Contents

1. Introduction
2. What is "cloud native"?
3. The compute spectrum
4. The storage spectrum
5. Communicating microservices
6. Authentication and directories
7. Build a "cloud-native" app: Athens

########################################

* Intro and Overview

- Your presenters
- Today: Several modules comprising discussion, demos and exercises
- Breaks and lunch: 10:15, 11:45, 2:15, 3:30
- Required tech: Linux laptop or VM, Azure CLI
- Assistants


* Resources

Azure accounts in Gophercon subscription
.link https://github.com/marstr/gophercon2018-cloudnative github.com/marstr/gophercon2018-cloudnative
.link https://azure.com/free azure.com/free

########################################

* What is "cloud-native"?

* What is "cloud-native"?

1. Compute runtimes
2. Communicating microservices
3. Managed platform and services
4. Continuous integration and delivery

.image img/cloud-native.png 358 490

* A cloud-native system

Managed compute, communication, services, and delivery.

.image img/cloud-native-app.png 494 610


########################################

* The Compute Spectrum

* The Compute Spectrum

.image img/compute-spectrum.png

* Exercise: Write and deploy a function.

* Containers: what and why

Shared, already started kernel means fast start times.
Isolation with cgroups and namespaces means separate kernels aren't necessary.

.image img/container-vs-vm.png 486 537

* Containers: what and why

Overlay filesystems mean most of base image can be cached and reused.

.image img/overlay-fs.png

* Exercise: Build, deploy and update a containerized app.

########################################

* The Storage Spectrum

TODO(joshgav): <img>
Blobs -> Cache -> NoSQL -> RDBMS
And don't forget data streams!

########################################

* 3) Communicating Between Services

* Communicating across thread boundaries

* Channels

- Thread safe queues
- Read/Write are blocking
- Optionally buffered
- Multiple producer/readers are acceptable

* Reading and Writing to Channels

.code ./presentation/channels_test.go /^func ExampleReadWriteBufferedChannel/,/^}/

- Must be buffered, or first write will never complete.

* Channels and Fibonacci

.code ./presentation/channels_test.go /^func ExampleBasicFibonacci/,/^}/

: This doesn't ever terminate, does anybody in the audience see the problem?

* Select

.code ./presentation/channels_test.go /^func ExampleSelectBlock/,/^}/

* Cancellable Fibonacci

.code ./presentation/channels_test.go /^func ExampleCancellableFibonacci/,/^}/

* Non-Blocking Channel Read

.code ./presentation/channels_test.go /^func ExampleDefaultClause/,/^}/

: `default` keyword unblocks a `select` when all channel operations were blocking.

: This trick only works when you're deciding whether or not a channel has been closed.

* context.Context

.code ./presentation/channels_test.go /START CONTEXT DEF/,/END CONTEXT DEF/

.code ./presentation/channels_test.go /type CancelFunc/,/\n/

.code ./presentation/channels_test.go /func WithCancel/,/{/

.code ./presentation/channels_test.go /func WithDeadline/,/{/

.code ./presentation/channels_test.go /func WithTimeout/,/{/

.code ./presentation/channels_test.go /func WithValue/,/{/

: Feature rich cancellation semantics
: Hierarchical cancellation propagation, timeout
: Property bag
: Good for Request-ID, and similar

* Fibonacci with Context

.code ./presentation/channels_test.go /func ExampleContextFibonacci/,/^}/

* Break for Cancellation exercises

Good luck!

* Dealing with High-Latency Blocking Calls

- Common to inject `context.Context` as first parameter:
.code ./exercises/cancellation/sudoku/board.go /^type Solver/,/error/

########################################

* Authentication and Directories

TODO(joshgav): OAuth authorization code flow image
- OAuth
- OpenID Connect

* Exercise: Run authenticated web app.

########################################

* Exercise: Deploy Athens.

