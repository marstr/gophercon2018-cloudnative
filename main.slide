Cloud-native Go
Build a continuously-updated app using managed platforms and services.
27 Aug 2018
Tags: cloud, azure, services

Josh Gavant
Program Manager, Microsoft
joshgav@microsoft.com
@joshugav

Martin Strobel
Software Engineer, Microsoft
marstr@microsoft.com
@mkstrobel

########################################

* Contents

1. Introduction
2. What is "cloud native"?
3. The compute spectrum
4. The storage spectrum
5. Communicating microservices
6. Authentication and directories
7. Build a "cloud-native" app: Athens

########################################

* Intro and Overview

- Your presenters
- Today: Several modules comprising discussion, demos and exercises
- Breaks and lunch: 10:15, 11:45, 2:15, 3:30
- Required tech: Linux laptop or VM, Azure CLI
- Assistants


* Resources

Azure accounts in Gophercon subscription
.link https://github.com/marstr/gophercon2018-cloudnative github.com/marstr/gophercon2018-cloudnative
.link https://azure.com/free azure.com/free

########################################

* What is "cloud-native"?

* What is "cloud-native"?

1. Compute runtimes
2. Communicating microservices
3. Managed platform and services
4. Continuous integration and delivery

.image img/cloud-native.png 358 490

* A cloud-native system

Managed compute, communication, services, and delivery.

.image img/cloud-native-app.png 494 610


########################################

* The Compute Spectrum

* The Compute Spectrum

Use "just enough" compute for each service.

.image img/compute-spectrum.png

* Exercise: Write and deploy a function.

* Containers: what and why

Shared, already started kernel means fast start times.
Isolation with cgroups and namespaces means separate kernels aren't necessary.

.image img/container-vs-vm.png 486 537

* Containers: what and why

Overlay filesystems mean most of base image can be cached and reused.

.image img/overlay-fs.png

* Exercise: Build, deploy and update a containerized app.

* The Storage Spectrum

With many services, storage must be externalized.

.image img/storage-spectrum.png

########################################

* Communicating Between Services

* Communicating across thread boundaries

* What are we trying to avoid?

- Unresponsive applications
- Race conditions
- Wasted system resources

: Race conditions aren't just unsafe memory access, also unrespected business logic invariants.

* Channels

- Thread safe queues
- Read/Write are blocking
- Optionally buffered
- Multiple producer/readers are acceptable

: Mention that we're not going to talk about the `sync` package.

* Reading and Writing to Channels

.code ./presentation/channels_test.go /^func ExampleReadWriteBufferedChannel/,/^}/

- Must be buffered, or first write will never complete.

* Select

.code ./presentation/channels_test.go /^func ExampleSelectBlock/,/^}/

: Mention `select` race behavior, non-determinism.

* Channels and Fibonacci

.code ./presentation/channels_test.go /^func ExampleBasicFibonacci/,/^}/

: This doesn't ever terminate, does anybody in the audience see the problem?

* Cancellable Fibonacci

.code ./presentation/channels_test.go /^func ExampleCancellableFibonacci/,/^}/

* Non-Blocking Channel Read

.code ./presentation/channels_test.go /^func ExampleDefaultClause/,/^}/

: `default` keyword unblocks a `select` when all channel operations were blocking.

: This trick only works when you're deciding whether or not a channel has been closed.

* context.Context

.code ./presentation/channels_test.go /START CONTEXT DEF/,/END CONTEXT DEF/

.code ./presentation/channels_test.go /type CancelFunc/,/\n/

.code ./presentation/channels_test.go /func WithCancel/,/{/

.code ./presentation/channels_test.go /func WithDeadline/,/{/

.code ./presentation/channels_test.go /func WithTimeout/,/{/

.code ./presentation/channels_test.go /func WithValue/,/{/

: Feature rich cancellation semantics
: Hierarchical cancellation propagation, timeout
: Property bag
: Good for Request-ID, and similar

* Fibonacci with Context

.code ./presentation/channels_test.go /func ExampleContextFibonacci/,/^}/

* Break for Cancellation exercises

Good luck!

* Communication Patterns

* What are we trying to avoid?
- Duplication of code.
- Overly tight coupling.
- Mismatched resource utilization

* Remote Procedure Call (RPC)
- Allow another machine to do a single operation for you.
- Same encapsulation as a function call.
- Adds latency, but distribution allows amortized work.

: Loads of technologies oriented around just this. `rpc` Go package, `gRPC`, even all the way back to `COM`.
: Lots of debate about where the appropriate place is to draw the line for local function/RPC call.

* Pub/Sub
- Make all concerned parties aware of an event.
- Decouples producer/consumer of data.
- Should be done by a broker.
- Each message should be easily individually traceable/auditable.

* Streaming Processing
- A special-case of pub/sub
- Huge number of events being published.
- Order is important, events partitioned together must be processed together.
- Think stock tickers, telemetry, and error monitoring.

: Easy to accidentally interpret this as more like UDP than TCP, where messages can be skipped, but that's not quite right.
: Messages just are more important in aggregate than individually.

* Calling Services Directly

.image ./img/direct.png _ 750

* Calling Services Directly

- Guarantees you lowest latency while still distributing load.
- Allows for highly agnostic contracts.
- OpenCensus, et al. allow observability

: Challenges - service discovery/load balancing are pretty frickin' manual.


* Service Mesh

- Services are paired with a "sidecar"
- The sidecar takes care of all sophisticated communication tasks.
- Original service takes care of just business logic.

* Calling with a Broker

.image ./img/brokered.png _ 750

* Calling with a Broker

- Retry logic/persistence handled by central authority.


* Break for Service Bus exercises
- Good luck!

########################################

* Authentication and Directories

Delegate auth and directory with OAuth and OpenID Connect.

.image img/oauth-authz-code.png 418 870


* Exercise: Run authenticated web app.

########################################

* Exercise: Deploy Athens.

